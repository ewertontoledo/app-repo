name: Build image -> OCIR, Trivy scan and update Fleet repo

on:
  push:
    branches: [ "stage" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      APP_NAME: "app-teste-2"
      APP_PORT: 9000
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}

    steps:
      # --- Checkout ---
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # --- Login OCIR ---
      - name: Login to OCIR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_AUTH_TOKEN }}

      # --- Build & Push Image ---
      - name: Build and push image if not exists
        run: |
          IMAGE="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/stage/image/${APP_NAME}:${{ github.sha }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "🔍 Verificando se a imagem já existe..."
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "✅ Imagem $IMAGE já existe"
          else
            echo "📦 Buildando e pushando $IMAGE..."
            docker build -t "$IMAGE" .
            docker push "$IMAGE"
          fi
      # --- Instalar Trivy ---
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          mkdir -p $HOME/bin
          mv ./bin/trivy $HOME/bin/
          echo "$HOME/bin" >> $GITHUB_PATH
          export PATH="$HOME/bin:$PATH"
          trivy --version
      # --- Trivy Scan ---
      - name: Criar diretório para relatório Trivy
        run: mkdir -p trivy-reports

      - name: Scan image with Trivy
        id: trivy
        run: |
          export PATH="$HOME/bin:$PATH"
          trivy image --severity HIGH,CRITICAL --exit-code 1 \
            --format json -o trivy-reports/trivy-report.json \
            "${IMAGE}"
      # --- Mostrar resumo no log ---
      - name: Show Trivy JSON summary in log
        if: always()
        run: |
          echo "🔍 Resumo das vulnerabilidades HIGH/CRITICAL:"
          if [ -f trivy-reports/trivy-report.json ]; then
            jq '.Results[]?.Vulnerabilities[]? | {PkgName, InstalledVersion, Severity, Title}' trivy-reports/trivy-report.json || echo "✅ Nenhuma vulnerabilidade encontrada"
          else
            echo "✅ Relatório não encontrado"
          fi
      # --- Upload Artifact ---
      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-reports/trivy-report.json

      # --- Notificação Teams apenas se falhar ---
      - name: Notify Teams on Trivy failure
        if: failure()
        run: |
          if [ -n "$TEAMS_WEBHOOK_URL" ]; then
            ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
              | jq -r '.artifacts[0].id')
            REPORT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${ARTIFACT_ID}"
            PAYLOAD="{\"text\": \"⚠️ A pipeline falhou durante o scan do Trivy para '${APP_NAME}'.\\n🔗 Relatório disponível em: ${REPORT_URL}\"}"
            curl -H 'Content-Type: application/json' -d "$PAYLOAD" $TEAMS_WEBHOOK_URL
          fi
      # --- Atualiza Fleet Repo ---
      - name: Update Fleet repo manifests
        if: success()
        env:
          FLEET_REPO: ${{ secrets.FLEET_REPO_URL }}
          FLEET_BRANCH: ${{ secrets.FLEET_BRANCH }}
          FLEET_PAT: ${{ secrets.FLEET_REPO_PAT }}
          IMAGE: ${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/stage/image/${{ env.APP_NAME }}:${{ github.sha }}
          PORT: ${{ env.APP_PORT }}
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          REPO_NO_PROTO="${FLEET_REPO#https://}"
          CLONE_URL="https://${FLEET_PAT}@${REPO_NO_PROTO}"
          BRANCH="${FLEET_BRANCH:-main}"
          git clone --depth 1 --branch "${BRANCH}" "${CLONE_URL}" fleet-repo
          cd fleet-repo
          sudo apt-get update -qq
          sudo apt-get install -y -qq jq
          curl -sSL https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64 -o yq
          chmod +x yq
          sudo mv yq /usr/local/bin/
          MANIFEST="k8s/apps/${APP_NAME}/stage/deployment.yaml"
          yq e -i ".spec.template.spec.containers[0].image = \"${IMAGE}\"" "$MANIFEST"
          yq e -i ".spec.template.spec.containers[0].ports[0].containerPort = ${PORT}" "$MANIFEST"
          if git diff --quiet --exit-code; then
            echo "✅ Nenhuma alteração detectada"
          else
            git add "$MANIFEST"
            git commit -m "Atualiza imagem e porta para ${IMAGE}:${PORT} [ci skip]"
            git push origin "${BRANCH}"
            echo "✅ Manifest atualizado"
          fi
      
      - name: Update/Create Monday Item (debug)
        if: success()
        env:
          MONDAY_API_TOKEN: ${{ secrets.MONDAY_API_TOKEN }}
          APP_NAME: ${{ env.APP_NAME }}
          IMAGE: ${{ env.IMAGE }}
          BOARD_ID: "10018892855"
        run: |
          set -o pipefail

          ITEM_NAME="Deploy Stage - $APP_NAME"
          echo "🚀 Verificando se já existe item: $ITEM_NAME"

          # Função simples para escapar aspas para GraphQL
          sanitize_string() {
            echo "$1" | sed 's/"/\\"/g' | tr -d '\n\r'
          }

          SAFE_ITEM_NAME=$(sanitize_string "$ITEM_NAME")
          SAFE_IMAGE_INFO=$(sanitize_string "Imagem: $IMAGE")

          echo "🔎 Debug vars:"
          echo "ITEM_NAME=$ITEM_NAME"
          echo "SAFE_ITEM_NAME=$SAFE_ITEM_NAME"
          echo "SAFE_IMAGE_INFO=$SAFE_IMAGE_INFO"

          # Buscar itens existentes na board
          QUERY="{\"query\": \"{ boards(ids: [$BOARD_ID]) { items { id name } } }\"}"
          echo "📤 Enviando query para Monday:"
          echo "$QUERY"

          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST https://api.monday.com/v2 \
            -H "Authorization: $MONDAY_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data-raw "$QUERY")

          HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
          BODY=$(echo "$RESPONSE" | sed '$d')

          echo "📊 HTTP Code: $HTTP_CODE"
          echo "📊 Resposta da API (raw):"
          echo "$BODY"

          # Verificar se a resposta foi sucesso
          if [ "$HTTP_CODE" -ne 200 ]; then
            echo "❌ Erro HTTP ao consultar Monday (código $HTTP_CODE)"
            exit 1
          fi

          # Verificar se tem items
          if ! echo "$BODY" | jq -e '.data.boards[0].items' >/dev/null 2>&1; then
            echo "❌ Não foi possível listar os itens da board. Resposta recebida:"
            echo "$BODY"
            exit 1
          fi

          ITEM_ID=$(echo "$BODY" | jq -r ".data.boards[0].items[]? | select(.name==\"$ITEM_NAME\") | .id")

          if [[ -n "$ITEM_ID" && "$ITEM_ID" != "null" ]]; then
            echo "♻️ Atualizando item existente: $ITEM_ID"

            UPDATE_MUTATION="{\"query\": \"mutation { change_multiple_column_values(board_id: $BOARD_ID, item_id: $ITEM_ID, column_values: \\\"{\\\\\\\"status\\\\\\\": {\\\\\\\"index\\\\\\\": 2}, \\\\\\\"text\\\\\\\": \\\\\\\"$SAFE_IMAGE_INFO\\\\\\\"}\\\") { id } }\"}"

            echo "📤 Mutation de update:"
            echo "$UPDATE_MUTATION"

            UPDATE_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST https://api.monday.com/v2 \
              -H "Authorization: $MONDAY_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data-raw "$UPDATE_MUTATION")

            UPDATE_HTTP=$(echo "$UPDATE_RESPONSE" | tail -n1)
            UPDATE_BODY=$(echo "$UPDATE_RESPONSE" | sed '$d')

            echo "📊 HTTP Code (update): $UPDATE_HTTP"
            echo "📝 Resposta do update:"
            echo "$UPDATE_BODY" | jq . || echo "$UPDATE_BODY"

            if ! echo "$UPDATE_BODY" | jq -e '.data.change_multiple_column_values.id' >/dev/null 2>&1; then
              echo "❌ Erro ao atualizar item"
              exit 1
            fi

            echo "✅ Item atualizado com sucesso!"

          else
            echo "🆕 Criando novo item no Monday.com..."

            CREATE_MUTATION="{\"query\": \"mutation { create_item(board_id: $BOARD_ID, item_name: \\\"$SAFE_ITEM_NAME\\\", column_values: \\\"{\\\\\\\"status\\\\\\\": {\\\\\\\"index\\\\\\\": 2}, \\\\\\\"text\\\\\\\": \\\\\\\"$SAFE_IMAGE_INFO\\\\\\\"}\\\") { id } }\"}"

            echo "📤 Mutation de create:"
            echo "$CREATE_MUTATION"

            CREATE_RESPONSE=$(curl -s -w "\n%{http_code}" -X POST https://api.monday.com/v2 \
              -H "Authorization: $MONDAY_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data-raw "$CREATE_MUTATION")

            CREATE_HTTP=$(echo "$CREATE_RESPONSE" | tail -n1)
            CREATE_BODY=$(echo "$CREATE_RESPONSE" | sed '$d')

            echo "📊 HTTP Code (create): $CREATE_HTTP"
            echo "📝 Resposta da criação:"
            echo "$CREATE_BODY" | jq . || echo "$CREATE_BODY"

            if ! echo "$CREATE_BODY" | jq -e '.data.create_item.id' >/dev/null 2>&1; then
              echo "❌ Erro ao criar item"
              exit 1
            fi

            NEW_ITEM_ID=$(echo "$CREATE_BODY" | jq -r '.data.create_item.id')
            echo "✅ Item criado com sucesso! ID: $NEW_ITEM_ID"
          fi

          echo "🎉 Monday.com integration completada!"

