name: Build image -> OCIR, Trivy scan and update Fleet repo

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      APP_NAME: "app-teste-2"
      APP_PORT: 9000
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to OCIR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_AUTH_TOKEN }}

      - name: Build and push image if not exists
        run: |
          IMAGE="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${APP_NAME}:${{ github.sha }}"
          echo "üîç Verificando se a imagem j√° existe..."
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "‚úÖ Imagem $IMAGE j√° existe"
          else
            echo "üì¶ Buildando e pushando $IMAGE..."
            docker build -t "$IMAGE" .
            docker push "$IMAGE"
          fi

      # --- TRIVY SCAN via CLI ---
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh

      - name: Scan image with Trivy (break on HIGH/CRITICAL)
        id: trivy
        run: |
          mkdir -p trivy-reports
          trivy image --exit-code 1 --severity HIGH,CRITICAL \
            --format json \
            -o trivy-reports/trivy-report.json \
            ${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${{ env.APP_NAME }}:${{ github.sha }}

      # --- Resumo leg√≠vel no log ---
      - name: Show Trivy JSON summary in log
        if: always()
        run: |
          echo "üîç Resumo das vulnerabilidades HIGH/CRITICAL:"
          if [ -f trivy-reports/trivy-report.json ]; then
            jq '.Results[]?.Vulnerabilities[]? | {PkgName, InstalledVersion, Severity, Title}' trivy-reports/trivy-report.json
          else
            echo "‚úÖ Relat√≥rio n√£o encontrado"
          fi

      # --- Upload Artifact interno ---
      - name: Upload Trivy report (artifact interno)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-reports/trivy-report.json

      - name: Artifact download link (interno)
        if: always()
        run: |
          echo "üîó Para baixar o relat√≥rio Trivy, acesse:"
          echo "https://github.com/${{ github.repository }}/suites/${{ github.run_id }}/artifacts"

      # --- Verifica se relat√≥rio existe para Release p√∫blico ---
      - name: Check Trivy report exists
        id: check_trivy
        run: |
          if [ -f trivy-reports/trivy-report.json ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Public Trivy report via GitHub Release
        if: steps.check_trivy.outputs.exists == 'true'
        uses: ncipollo/release-action@v1
        with:
          tag: "trivy-report-${{ github.run_number }}"
          name: "Trivy Report #${{ github.run_number }}"
          files: trivy-reports/trivy-report.json
          draft: false
          prerelease: false

      # --- Notifica√ß√£o Teams em caso de falha ---
      - name: Notify Teams on Trivy failure
        if: failure()
        env:
          TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          if [ -n "$TEAMS_WEBHOOK_URL" ]; then
            PAYLOAD="{\"text\": \"‚ö†Ô∏è A pipeline falhou durante o scan do Trivy para '${{ env.APP_NAME }}'. Verifique o relat√≥rio.\"}"
            curl -H 'Content-Type: application/json' -d "$PAYLOAD" $TEAMS_WEBHOOK_URL

      # --- Update Fleet repo ---
      - name: Update Fleet repo manifests
        if: success()
        env:
          FLEET_REPO: ${{ secrets.FLEET_REPO_URL }}
          FLEET_BRANCH: ${{ secrets.FLEET_BRANCH }}
          FLEET_PAT: ${{ secrets.FLEET_REPO_PAT }}
          IMAGE: ${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${{ env.APP_NAME }}:${{ github.sha }}
          PORT: ${{ env.APP_PORT }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          REPO_NO_PROTO=${FLEET_REPO#https://}
          CLONE_URL="https://${FLEET_PAT}@${REPO_NO_PROTO}"
          BRANCH="${FLEET_BRANCH:-main}"
          git clone --depth 1 --branch "${BRANCH}" "${CLONE_URL}" fleet-repo
          cd fleet-repo || exit 1

          sudo apt-get update -qq && sudo apt-get install -y -qq jq
          curl -sSL https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64 -o yq
          chmod +x yq && sudo mv yq /usr/local/bin/

          MANIFEST="k8s/apps/${APP_NAME}/deployment.yaml"
          yq e -i '.spec.template.spec.containers[0].image = env(IMAGE)' "$MANIFEST"
          yq e -i '.spec.template.spec.containers[0].ports[0].containerPort = env(PORT)' "$MANIFEST"

          if git diff --quiet --exit-code; then
            echo "‚úÖ Nenhuma altera√ß√£o detectada"
          else
            git add "$MANIFEST"
            git commit -m "Atualiza imagem e porta para ${IMAGE}:${PORT} [ci skip]"
            git push origin "${BRANCH}"
            echo "‚úÖ Manifest atualizado"
