name: Build image -> OCIR, Trivy Scan and Update Fleet repo

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      APP_NAME: "app-teste-2"
      APP_PORT: 9100
      TRIVY_FAIL_ON: "true"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to OCIR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_AUTH_TOKEN }}

      - name: Build and push image
        run: |
          set -euo pipefail
          IMAGE="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${APP_NAME}:${{ github.sha }}"
          echo "üì¶ Buildando e pushando $IMAGE..."
          docker buildx build --platform linux/amd64,linux/arm64 -t "$IMAGE" --push .

      - name: Scan image with Trivy
        run: |
          set -euo pipefail
          IMAGE="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${APP_NAME}:${{ github.sha }}"
          echo "üîí Escaneando $IMAGE com Trivy..."
          curl -sfL https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.65.0_Linux-64bit.tar.gz -o trivy.tar.gz
          tar zxvf trivy.tar.gz
          sudo mv trivy /usr/local/bin/
          mkdir -p trivy-reports
          trivy image --exit-code 0 --severity HIGH,CRITICAL --format json -o trivy-reports/trivy-report.json "$IMAGE"
          zip -r trivy-reports.zip trivy-reports

      - name: Generate upgrade suggestions JSON
        run: |
          set -euo pipefail
          jq '[.Results[].Vulnerabilities[]? 
               | select(.Severity=="HIGH" or .Severity=="CRITICAL") 
               | {package: .PkgName, current_version: .InstalledVersion, suggested_fix: .FixedVersion, severity: .Severity, cve: .VulnerabilityID}]' \
               trivy-reports/trivy-report.json > trivy-reports/upgrade-suggestions.json
          echo "üìÑ Arquivo de sugest√µes gerado em trivy-reports/upgrade-suggestions.json"

      - name: Show Trivy JSON and fail if needed
        if: ${{ env.TRIVY_FAIL_ON == 'true' }}
        run: |
          set -euo pipefail
          COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length' trivy-reports/trivy-report.json)
          echo "üìÑ Relat√≥rio completo de vulnerabilidades:"
          jq '.' trivy-reports/trivy-report.json || echo "‚úÖ Nenhuma vulnerabilidade cr√≠tica"
          if [ "$COUNT" -gt 0 ]; then
            echo "‚ùå Encontradas $COUNT vulnerabilidades HIGH/CRITICAL"
            exit 1
          else
            echo "‚úÖ Nenhuma vulnerabilidade HIGH/CRITICAL encontrada"
          fi

      - name: Upload Trivy reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: trivy-reports/
      - name: Upload Trivy reports ZIP
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports-zip
          path: trivy-reports.zip

      - name: Update Fleet repo manifests
        env:
          FLEET_REPO: ${{ secrets.FLEET_REPO_URL }}
          FLEET_BRANCH: ${{ secrets.FLEET_BRANCH }}
          FLEET_PAT: ${{ secrets.FLEET_REPO_PAT }}
          IMAGE: ${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${APP_NAME}:${{ github.sha }}
          APP_NAME: ${{ env.APP_NAME }}
          APP_PORT: ${{ env.APP_PORT }}
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          REPO_NO_PROTO=${FLEET_REPO#https://}
          CLONE_URL="https://${FLEET_PAT}@${REPO_NO_PROTO}"
          BRANCH="${FLEET_BRANCH:-main}"

          git clone --depth 1 --branch "${BRANCH}" "${CLONE_URL}" fleet-repo
          cd fleet-repo || exit 1

          # Instala yq
          sudo apt-get update && sudo apt-get install -y jq
          curl -sL https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64 -o yq
          chmod +x yq && sudo mv yq /usr/local/bin/

          # Caminho din√¢mico do Deployment
          DEPLOYMENT_FILE="k8s/apps/${APP_NAME}/deployment.yaml"
          if [ -f "$DEPLOYMENT_FILE" ]; then
            # Atualiza apenas a imagem
            yq e -i '.spec.template.spec.containers[] |= (select(.name == "'"${APP_NAME}"'") .image = env(IMAGE))' "$DEPLOYMENT_FILE"

            # Atualiza porta somente se n√£o estiver definida
            CURRENT_PORT=$(yq e '.spec.template.spec.containers[] | select(.name=="'"${APP_NAME}"'") | .ports[0].containerPort // ""' "$DEPLOYMENT_FILE")
            if [ -z "$CURRENT_PORT" ]; then
              yq e -i '.spec.template.spec.containers[] |= (select(.name == "'"${APP_NAME}"'") .ports[0].containerPort = env(APP_PORT))' "$DEPLOYMENT_FILE"
            fi

            if git diff --quiet --exit-code; then
              echo "‚úÖ Nenhuma altera√ß√£o necess√°ria"
            else
              git add "$DEPLOYMENT_FILE"
              git commit -m "Atualiza imagem (e porta se necess√°rio) para ${APP_NAME} [ci skip]"
              git push origin "${BRANCH}"
              echo "üöÄ Manifest atualizado no Fleet repo"
            fi
          else
            echo "‚ö†Ô∏è Arquivo $DEPLOYMENT_FILE n√£o encontrado, pulando atualiza√ß√£o"
          fi
