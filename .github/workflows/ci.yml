name: Build image -> OCIR and update Fleet repo

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      APP_NAME: "app-teste-3"  # <-- alterar manualmente para o app desejado
    steps:
      # 1Ô∏è‚É£ Checkout do reposit√≥rio
      - name: Checkout
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configura QEMU para multi-arch builds
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3Ô∏è‚É£ Login no OCIR
      - name: Login to OCIR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_AUTH_TOKEN }}

      # 4Ô∏è‚É£ Build e push da imagem Docker apenas se n√£o existir
      - name: Build and push image if not exists
        run: |
          IMAGE="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${APP_NAME}:${{ github.sha }}"
          echo "üîç Verificando se a imagem j√° existe no registry..."
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "‚úÖ Imagem $IMAGE j√° existe, pulando build"
          else
            echo "üì¶ Imagem n√£o encontrada, buildando e pushando..."
            docker build -t "$IMAGE" "k8s/apps/$APP_NAME"
            docker push "$IMAGE"
          fi

      # 5Ô∏è‚É£ Atualiza o manifest do Fleet repo
      - name: Update Fleet repo manifests
        env:
          FLEET_REPO: ${{ secrets.FLEET_REPO_URL }}
          FLEET_BRANCH: ${{ secrets.FLEET_BRANCH }}
          FLEET_PAT: ${{ secrets.FLEET_REPO_PAT }}
          IMAGE: ${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${{ env.APP_NAME }}:${{ github.sha }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Clona o repo do Fleet
          REPO_NO_PROTO=${FLEET_REPO#https://}
          CLONE_URL="https://${FLEET_PAT}@${REPO_NO_PROTO}"
          BRANCH="${FLEET_BRANCH:-main}"
          git clone --depth 1 --branch "${BRANCH}" "${CLONE_URL}" fleet-repo
          cd fleet-repo || exit 1

          # Instala yq
          sudo apt-get update && sudo apt-get install -y jq
          curl -sL https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64 -o yq
          chmod +x yq && sudo mv yq /usr/local/bin/

          # Atualiza a imagem no deployment do app selecionado
          DEPLOYMENT_FILE="k8s/apps/${APP_NAME}/deployment.yaml"
          yq e -i '.spec.template.spec.containers[0].image = env(IMAGE)' "$DEPLOYMENT_FILE"

          # Commit e push apenas se houver altera√ß√µes
          if git diff --quiet --exit-code; then
            echo "‚úÖ Nenhuma altera√ß√£o detectada no manifest"
          else
            git add "$DEPLOYMENT_FILE"
            git commit -m "Atualiza imagem para ${IMAGE} [ci skip]"
            git push origin "${BRANCH}"
            echo "‚úÖ Manifest atualizado no Fleet repo"
          fi