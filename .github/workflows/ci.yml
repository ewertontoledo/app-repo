name: Deploy Multi-Environment

on:
  push:
    branches: [ "develop", "stage", "prod" ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de deploy (develop, stage, prod)'
        required: false
        default: ''
      status:
        description: 'Status do deploy'
        required: true
        default: 'Não iniciado'

jobs:
  detect-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.detect.outputs.environment }}
      manifest_path: ${{ steps.detect.outputs.manifest_path }}
    steps:
      - name: Detect Environment based on branch and input
        id: detect
        run: |
          if [ -n "${{ github.event.inputs.environment }}" ]; then
            ENV="${{ github.event.inputs.environment }}"
          else
            case "${{ github.ref_name }}" in
              "develop") ENV="develop" ;;
              "stage") ENV="stage" ;;
              "prod") ENV="prod" ;;
              "main") ENV="prod" ;;
              *) ENV="develop" ;;
            esac
          fi

          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "manifest_path=k8s/apps/${{ env.APP_NAME }}/$ENV" >> $GITHUB_OUTPUT

          echo "🎯 Ambiente detectado: $ENV"
          case "$ENV" in
            "develop") WORKFLOW_TITLE="🚀 Deploy Development" ;;
            "stage") WORKFLOW_TITLE="🔄 Deploy Staging" ;;
            "prod") WORKFLOW_TITLE="🎯 Deploy Production" ;;
            *) WORKFLOW_TITLE="🔧 Deploy $ENV" ;;
          esac
          echo "workflow_title=$WORKFLOW_TITLE" >> $GITHUB_OUTPUT

  build-and-push:
    runs-on: ubuntu-latest
    needs: detect-environment
    env:
      APP_NAME: "app-teste-2"
      APP_PORT: 9000
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
      ENVIRONMENT: ${{ needs.detect-environment.outputs.environment }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 🎯 Show Environment Info
        run: |
          echo "=========================================="
          echo "🎯 DEPLOY PARA: ${{ needs.detect-environment.outputs.environment }}"
          echo "🌐 Branch: ${{ github.ref_name }}"
          echo "📦 Aplicação: ${APP_NAME}"
          echo "=========================================="

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to OCIR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_AUTH_TOKEN }}

      - name: Build and push image dynamically based on environment
        run: |
          IMAGE="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/${ENVIRONMENT}/image/${APP_NAME}:${{ github.sha }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          if ! docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            docker build -t "$IMAGE" .
            docker push "$IMAGE"
          fi

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          mkdir -p $HOME/bin
          mv ./bin/trivy $HOME/bin/
          echo "$HOME/bin" >> $GITHUB_PATH
          export PATH="$HOME/bin:$PATH"
          trivy --version

      - name: Criar diretório para relatório Trivy
        run: mkdir -p trivy-reports

      - name: Scan image with Trivy
        id: trivy
        run: |
          export PATH="$HOME/bin:$PATH"
          trivy image --severity HIGH,CRITICAL --exit-code 1 \
            --format json -o trivy-reports/trivy-report-${ENVIRONMENT}.json \
            "${IMAGE}"

      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-${{ env.ENVIRONMENT }}
          path: trivy-reports/trivy-report-${{ env.ENVIRONMENT }}.json

      - name: Update Fleet repo manifests dynamically
        if: success()
        env:
          FLEET_REPO: ${{ secrets.FLEET_REPO_URL }}
          FLEET_BRANCH: ${{ needs.detect-environment.outputs.environment }}
          FLEET_PAT: ${{ secrets.FLEET_REPO_PAT }}
          IMAGE: ${{ env.IMAGE }}
          PORT: ${{ env.APP_PORT }}
          MANIFEST_PATH: ${{ needs.detect-environment.outputs.manifest_path }}
        run: |
          set -euo pipefail
          
          echo "🚀 Atualizando manifests para ambiente: ${ENVIRONMENT}"
          echo "📁 Path do manifest: ${MANIFEST_PATH}"
          echo "🎯 Imagem: ${IMAGE}"

          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          REPO_NO_PROTO="${FLEET_REPO#https://}"
          CLONE_URL="https://${FLEET_PAT}@${REPO_NO_PROTO}"
          BRANCH="${FLEET_BRANCH}"

          git clone --depth 1 --branch "${BRANCH}" "${CLONE_URL}" fleet-repo
          cd fleet-repo

          sudo apt-get update -qq
          sudo apt-get install -y -qq jq
          curl -sSL https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64 -o yq
          chmod +x yq
          sudo mv yq /usr/local/bin/

          DEPLOYMENT_MANIFEST="${MANIFEST_PATH}/deployment.yaml"
          SERVICE_MANIFEST="${MANIFEST_PATH}/service.yaml"

          if [ ! -d "$(dirname "$DEPLOYMENT_MANIFEST")" ]; then
            mkdir -p "$(dirname "$DEPLOYMENT_MANIFEST")"
          fi

          # Cria templates se não existirem
          if [ ! -f "$DEPLOYMENT_MANIFEST" ]; then
            cat > "$DEPLOYMENT_MANIFEST" << EOF
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: ${APP_NAME}-${ENVIRONMENT}
            namespace: ${ENVIRONMENT}
            labels:
              app: ${APP_NAME}
              environment: ${ENVIRONMENT}
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: ${APP_NAME}
                environment: ${ENVIRONMENT}
            template:
              metadata:
                labels:
                  app: ${APP_NAME}
                  environment: ${ENVIRONMENT}
              spec:
                containers:
                - name: ${APP_NAME}
                  image: ${IMAGE}
                  ports:
                  - containerPort: ${PORT}
                  env:
                  - name: ENVIRONMENT
                    value: ${ENVIRONMENT}
                  - name: APP_PORT
                    value: "${PORT}"
          EOF
                    fi

                    if [ ! -f "$SERVICE_MANIFEST" ]; then
                      cat > "$SERVICE_MANIFEST" << EOF
          apiVersion: v1
          kind: Service
          metadata:
            name: ${APP_NAME}-${ENVIRONMENT}-service
            namespace: ${ENVIRONMENT}
            labels:
              app: ${APP_NAME}
              environment: ${ENVIRONMENT}
          spec:
            selector:
              app: ${APP_NAME}
              environment: ${ENVIRONMENT}
            ports:
            - protocol: TCP
              port: 80
              targetPort: ${PORT}
            type: ClusterIP
          EOF
          fi

          # Atualiza manifests
          yq e -i ".spec.template.spec.containers[0].image = \"${IMAGE}\"" "$DEPLOYMENT_MANIFEST"
          yq e -i ".spec.template.spec.containers[0].ports[0].containerPort = ${PORT}" "$DEPLOYMENT_MANIFEST"
          yq e -i ".spec.template.spec.containers[0].env[1].value = \"${PORT}\"" "$DEPLOYMENT_MANIFEST"
          yq e -i ".spec.ports[0].targetPort = ${PORT}" "$SERVICE_MANIFEST"

          if git diff --quiet --exit-code; then
            echo "✅ Nenhuma alteração detectada nos manifests"
          else
            git add "${MANIFEST_PATH}/"
            git commit -m "Deploy ${APP_NAME} para ${ENVIRONMENT}: ${IMAGE} [ci skip]"
            git push origin "${BRANCH}"
            echo "✅ Manifests atualizados com sucesso!"
          fi

      - name: 🎉 Deploy Summary
        if: always()
        run: |
          echo "=========================================="
          echo "🎉 DEPLOY FINALIZADO"
          echo "=========================================="
          echo "🎯 AMBIENTE: ${ENVIRONMENT^^}"
          echo "🌐 BRANCH: ${{ github.ref_name }}"
          echo "🏗️ Aplicação: ${APP_NAME}"
          echo "🎨 Imagem: ${IMAGE}"
          echo "📁 Manifests: ${MANIFEST_PATH}"
          echo "🌐 Porta: ${APP_PORT}"
          echo "📊 Status: ${{ job.status }}"
