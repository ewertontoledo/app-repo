name: Build image -> OCIR, Trivy scan and update Fleet repo

on:
  push:
    branches: ["stage"]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      APP_NAME: "app-teste-2"
      APP_PORT: 9000
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}

    steps:
      # --- Checkout ---
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # --- Login OCIR ---
      - name: Login to OCIR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_AUTH_TOKEN }}

      # --- Build & Push Image ---
      - name: Build and push image if not exists
        run: |
          IMAGE="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/stage/image/${APP_NAME}:${{ github.sha }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "🔍 Verificando se a imagem já existe..."
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "✅ Imagem $IMAGE já existe"
          else
            echo "📦 Buildando e pushando $IMAGE..."
            docker build -t "$IMAGE" .
            docker push "$IMAGE"

      # --- Trivy Scan (comentado) ---
      # (mantido comentado para testes do Monday, igual ao seu original)

      # --- Atualiza Fleet Repo ---
      - name: Update Fleet repo manifests
        if: success()
        env:
          FLEET_REPO: ${{ secrets.FLEET_REPO_URL }}
          FLEET_BRANCH: ${{ secrets.FLEET_BRANCH }}
          FLEET_PAT: ${{ secrets.FLEET_REPO_PAT }}
          IMAGE: ${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/stage/image/${{ env.APP_NAME }}:${{ github.sha }}
          PORT: ${{ env.APP_PORT }}
          APP_NAME: ${{ env.APP_NAME }}
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          REPO_NO_PROTO="${FLEET_REPO#https://}"
          CLONE_URL="https://${FLEET_PAT}@${REPO_NO_PROTO}"
          BRANCH="${FLEET_BRANCH:-main}"

          git clone --depth 1 --branch "${BRANCH}" "${CLONE_URL}" fleet-repo
          cd fleet-repo

          sudo apt-get update -qq
          sudo apt-get install -y -qq jq

          curl -sSL https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64 -o yq
          chmod +x yq
          sudo mv yq /usr/local/bin/

          MANIFEST="k8s/apps/${APP_NAME}/stage/deployment.yaml"
          yq e -i ".spec.template.spec.containers[0].image = \"${IMAGE}\"" "$MANIFEST"
          yq e -i ".spec.template.spec.containers[0].ports[0].containerPort = ${PORT}" "$MANIFEST"

          if git diff --quiet --exit-code; then
            echo "✅ Nenhuma alteração detectada"
          else
            git add "$MANIFEST"
            git commit -m "Atualiza imagem e porta para ${IMAGE}:${PORT} [ci skip]"
            git push origin "${BRANCH}"
            echo "✅ Manifest atualizado"

      # --- Atualiza tarefa no Monday ---
      - name: Create/Update Monday Item
        if: success()
        env:
          MONDAY_API_TOKEN: ${{ secrets.MONDAY_API_TOKEN }}
          APP_NAME: ${{ env.APP_NAME }}
          IMAGE: ${{ env.IMAGE }}
          BOARD_ID: "10018892855"  # ID fixo da board Deploy
        run: |
          ITEM_NAME="Deploy Stage - $APP_NAME"
          echo "Criando item '$ITEM_NAME' na board Deploy (ID: $BOARD_ID)..."

          # Cria JSON para column_values de forma segura
          COLUMN_VALUES=$(jq -n \
            --arg status "Para Teste" \
            --arg text "Imagem: $IMAGE" \
            '{status: {label: $status}, text: $text}')

          # Executa mutation no Monday
          curl -s -X POST https://api.monday.com/v2 \
            -H "Authorization: $MONDAY_API_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
              \"query\": \"mutation { create_item(board_id: $BOARD_ID, item_name: \\\"$ITEM_NAME\\\", column_values: '$COLUMN_VALUES') { id } }\"
            }"

          echo "Item criado com sucesso!"
