name: Build image -> OCIR, Trivy scan and update Fleet repo

on:
  push:
    branches: [ "stage" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      APP_NAME: "app-teste-2"
      APP_PORT: 9000
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}

    steps:
      # --- Checkout ---
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # --- Login OCIR ---
      - name: Login to OCIR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_AUTH_TOKEN }}

      # --- Build & Push Image ---
      - name: Build and push image if not exists
        run: |
          IMAGE="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/stage/image/${APP_NAME}:${{ github.sha }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "üîç Verificando se a imagem j√° existe..."
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "‚úÖ Imagem $IMAGE j√° existe"
          else
            echo "üì¶ Buildando e pushando $IMAGE..."
            docker build -t "$IMAGE" .
            docker push "$IMAGE"
          fi

      # --- Instalar Trivy ---
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          mkdir -p $HOME/bin
          mv ./bin/trivy $HOME/bin/
          echo "$HOME/bin" >> $GITHUB_PATH
          export PATH="$HOME/bin:$PATH"
          trivy --version

      # --- Trivy Scan ---
      - name: Criar diret√≥rio para relat√≥rio Trivy
        run: mkdir -p trivy-reports

      - name: Scan image with Trivy
        id: trivy
        run: |
          export PATH="$HOME/bin:$PATH"
          trivy image --severity HIGH,CRITICAL --exit-code 1 \
            --format json -o trivy-reports/trivy-report.json \
            "${IMAGE}"

      # --- Mostrar resumo no log ---
      - name: Show Trivy JSON summary in log
        if: always()
        run: |
          echo "üîç Resumo das vulnerabilidades HIGH/CRITICAL:"
          if [ -f trivy-reports/trivy-report.json ]; then
            jq '.Results[]?.Vulnerabilities[]? | {PkgName, InstalledVersion, Severity, Title}' trivy-reports/trivy-report.json || echo "‚úÖ Nenhuma vulnerabilidade encontrada"
          else
            echo "‚úÖ Relat√≥rio n√£o encontrado"
          fi

      # --- Upload Artifact ---
      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-reports/trivy-report.json

      # --- Notifica√ß√£o Teams apenas se falhar ---
      - name: Notify Teams on Trivy failure
        if: failure()
        run: |
          if [ -n "$TEAMS_WEBHOOK_URL" ]; then
            ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
              | jq -r '.artifacts[0].id')
            REPORT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${ARTIFACT_ID}"
            PAYLOAD="{\"text\": \"‚ö†Ô∏è A pipeline falhou durante o scan do Trivy para '${APP_NAME}'.\\nüîó Relat√≥rio dispon√≠vel em: ${REPORT_URL}\"}"
            curl -H 'Content-Type: application/json' -d "$PAYLOAD" $TEAMS_WEBHOOK_URL
          fi

      # --- Atualiza Fleet Repo ---
      - name: Update Fleet repo manifests
        if: success()
        env:
          FLEET_REPO: ${{ secrets.FLEET_REPO_URL }}
          FLEET_BRANCH: ${{ secrets.FLEET_BRANCH }}
          FLEET_PAT: ${{ secrets.FLEET_REPO_PAT }}
          IMAGE: ${{ env.IMAGE }}
          PORT: ${{ env.APP_PORT }}
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          REPO_NO_PROTO="${FLEET_REPO#https://}"
          CLONE_URL="https://${FLEET_PAT}@${REPO_NO_PROTO}"
          BRANCH="${FLEET_BRANCH:-main}"
          git clone --depth 1 --branch "${BRANCH}" "${CLONE_URL}" fleet-repo
          cd fleet-repo
          sudo apt-get update -qq
          sudo apt-get install -y -qq jq
          curl -sSL https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64 -o yq
          chmod +x yq
          sudo mv yq /usr/local/bin/
          MANIFEST="k8s/apps/${APP_NAME}/stage/deployment.yaml"
          yq e -i ".spec.template.spec.containers[0].image = \"${IMAGE}\"" "$MANIFEST"
          yq e -i ".spec.template.spec.containers[0].ports[0].containerPort = ${PORT}" "$MANIFEST"
          if git diff --quiet --exit-code; then
            echo "‚úÖ Nenhuma altera√ß√£o detectada"
          else
            git add "$MANIFEST"
            git commit -m "Atualiza imagem e porta para ${IMAGE}:${PORT} [ci skip]"
            git push origin "${BRANCH}"
            echo "‚úÖ Manifest atualizado"
          fi

      # --- Create/Update Monday Item ---
      - name: Create/Update Monday Item
        if: success()
        env:
          MONDAY_API_TOKEN: ${{ secrets.MONDAY_API_TOKEN }}
          APP_NAME: ${{ env.APP_NAME }}
          IMAGE: ${{ env.IMAGE }}
          BOARD_ID: "10018892855"
        run: |
          set -eo pipefail

          ITEM_NAME="Deploy Stage - $APP_NAME"
          IMAGE_INFO="Imagem: $IMAGE"

          echo "üöÄ Processando item: $ITEM_NAME"

          # Fun√ß√£o para escapar strings para JSON/GraphQL
          json_escape() { jq -Rn --arg str "$1" '$str|@json'; }
          SAFE_ITEM_NAME=$(json_escape "$ITEM_NAME")
          SAFE_IMAGE_INFO=$(json_escape "$IMAGE_INFO")

          # Fun√ß√£o para enviar requisi√ß√£o ao Monday
          call_monday() {
            local payload="$1"
            RESPONSE=$(curl -s -w "\n%{http_code}" -X POST https://api.monday.com/v2 \
              -H "Authorization: Bearer $MONDAY_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data-raw "$payload")
            HTTP_CODE=$(echo "$RESPONSE" | tail -n1)
            BODY=$(echo "$RESPONSE" | sed '$d')

            echo "üì§ Payload enviado:"
            echo "$payload" | jq . || echo "$payload"
            echo "üì• HTTP Code: $HTTP_CODE"
            echo "üì• Resposta da API:"
            echo "$BODY" | jq . || echo "$BODY"

            if [ "$HTTP_CODE" -ne 200 ]; then
              echo "‚ùå HTTP $HTTP_CODE"
              exit 1
            fi
            if echo "$BODY" | jq -e '.errors' >/dev/null; then
              echo "‚ùå API Error: $(echo $BODY | jq .errors)"
              exit 1
            fi
            echo "$BODY"
          }

          # 1Ô∏è‚É£ Listar itens do board para ver se j√° existe
          QUERY=$(jq -n --arg id "$BOARD_ID" \
            '{query: "query { boards(ids: \($id)) { items { id name } } }"}')
          BODY=$(call_monday "$QUERY")
          ITEM_ID=$(echo "$BODY" | jq -r ".data.boards[0].items[]? | select(.name==\"$ITEM_NAME\") | .id")

          # 2Ô∏è‚É£ Upsert: cria ou atualiza
          if [ -n "$ITEM_ID" ]; then
            echo "‚ôªÔ∏è Atualizando item existente: $ITEM_ID"
            MUTATION=$(jq -n --arg id "$ITEM_ID" --arg text "$SAFE_IMAGE_INFO" \
              '{query: "mutation { change_multiple_column_values(board_id: 10018892855, item_id: \($id), column_values: {\"project_status\":{\"index\":2},\"text_mkvn9dqm\":\($text)}) { id } }"}')
            BODY=$(call_monday "$MUTATION")
            echo "‚úÖ Item atualizado com sucesso: $ITEM_ID"
          else
            echo "üÜï Criando novo item"
            MUTATION=$(jq -n --arg name "$SAFE_ITEM_NAME" --arg text "$SAFE_IMAGE_INFO" \
              '{query: "mutation { create_item(board_id: 10018892855, item_name: \($name), column_values: {\"project_status\":{\"index\":2},\"text_mkvn9dqm\":\($text)}) { id } }"}')
            BODY=$(call_monday "$MUTATION")
            NEW_ITEM_ID=$(echo "$BODY" | jq -r '.data.create_item.id')
            echo "‚úÖ Item criado com sucesso: $NEW_ITEM_ID"
          fi

          echo "üéâ Integra√ß√£o com Monday.com finalizada!"
