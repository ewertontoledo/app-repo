name: Build image -> OCIR, Trivy scan and update Fleet repo

on:
  push:
    branches: [ "stage" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      APP_NAME: "app-teste-2"
      APP_PORT: 9000
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}

    steps:
      # --- Checkout ---
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # --- Login OCIR ---
      - name: Login to OCIR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_AUTH_TOKEN }}

      # --- Build & Push Image ---
      - name: Build and push image if not exists
        run: |
          IMAGE="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/stage/image/${APP_NAME}:${{ github.sha }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "üîç Verificando se a imagem j√° existe..."
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "‚úÖ Imagem $IMAGE j√° existe"
          else
            echo "üì¶ Buildando e pushando $IMAGE..."
            docker build -t "$IMAGE" .
            docker push "$IMAGE"
          fi
      # --- Instalar Trivy ---
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          mkdir -p $HOME/bin
          mv ./bin/trivy $HOME/bin/
          echo "$HOME/bin" >> $GITHUB_PATH
          export PATH="$HOME/bin:$PATH"
          trivy --version
      # --- Trivy Scan ---
      - name: Criar diret√≥rio para relat√≥rio Trivy
        run: mkdir -p trivy-reports

      - name: Scan image with Trivy
        id: trivy
        run: |
          export PATH="$HOME/bin:$PATH"
          trivy image --severity HIGH,CRITICAL --exit-code 1 \
            --format json -o trivy-reports/trivy-report.json \
            "${IMAGE}"
      # --- Mostrar resumo no log ---
      - name: Show Trivy JSON summary in log
        if: always()
        run: |
          echo "üîç Resumo das vulnerabilidades HIGH/CRITICAL:"
          if [ -f trivy-reports/trivy-report.json ]; then
            jq '.Results[]?.Vulnerabilities[]? | {PkgName, InstalledVersion, Severity, Title}' trivy-reports/trivy-report.json || echo "‚úÖ Nenhuma vulnerabilidade encontrada"
          else
            echo "‚úÖ Relat√≥rio n√£o encontrado"
          fi
      # --- Upload Artifact ---
      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-reports/trivy-report.json

      # --- Notifica√ß√£o Teams apenas se falhar ---
      - name: Notify Teams on Trivy failure
        if: failure()
        run: |
          if [ -n "$TEAMS_WEBHOOK_URL" ]; then
            ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
              | jq -r '.artifacts[0].id')
            REPORT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${ARTIFACT_ID}"
            PAYLOAD="{\"text\": \"‚ö†Ô∏è A pipeline falhou durante o scan do Trivy para '${APP_NAME}'.\\nüîó Relat√≥rio dispon√≠vel em: ${REPORT_URL}\"}"
            curl -H 'Content-Type: application/json' -d "$PAYLOAD" $TEAMS_WEBHOOK_URL
          fi
      # --- Atualiza Fleet Repo ---
      - name: Create/Update Monday Item
        if: success()
        env:
          MONDAY_API_TOKEN: ${{ secrets.MONDAY_API_TOKEN }}
          APP_NAME: ${{ env.APP_NAME }}
          IMAGE: ${{ env.IMAGE }}
          BOARD_ID: "10018892855"
          STATUS_LABEL: "N√£o iniciado"
        run: |
          set -eo pipefail

          ITEM_NAME="Deploy Stage - $APP_NAME"
          IMAGE_INFO="Imagem: $IMAGE"
          echo "üöÄ Verificando item: $ITEM_NAME"

          # --- Fun√ß√£o para escapar strings para GraphQL ---
          json_escape() { jq -Rn --arg str "$1" '$str|@json'; }

          # --- Verifica se o item j√° existe ---
          QUERY=$(jq -n --arg board_id "$BOARD_ID" --arg name "$ITEM_NAME" \
            '{query: "query { items_page_by_column_values(board_id: \($board_id|tonumber), columns: [{column_id:\"name\", column_values:[\($name|@json)]}]) { items { id column_values { id text } } } }"}')

          RESPONSE=$(curl -s -X POST https://api.monday.com/v2 \
            -H "Authorization: Bearer $MONDAY_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data-raw "$QUERY")

          ITEM_ID=$(echo "$RESPONSE" | jq -r '.data.items_page_by_column_values.items[0].id // empty')
          CURRENT_STATUS=$(echo "$RESPONSE" | jq -r '
            .data.items_page_by_column_values.items[0].column_values? // [] 
            | map(select(.id=="project_status"))[0].text // empty
          ')

          # --- Cria os valores das colunas ---
          COLUMN_VALUES=$(jq -n --arg info "$IMAGE_INFO" --arg status "$STATUS_LABEL" \
            '{project_status: {label: $status}, text_mkvn9dqm: $info}')

          if [ -n "$ITEM_ID" ]; then
            echo "üîÑ Item j√° existe (ID: $ITEM_ID), atualizando Info e status..."
            UPDATE_PAYLOAD=$(jq -n --arg item_id "$ITEM_ID" --arg board_id "$BOARD_ID" --argjson colvals "$COLUMN_VALUES" \
              '{query: "mutation { change_multiple_column_values(board_id: \($board_id|tonumber), item_id: \($item_id|tonumber), column_values: \($colvals|@json)) { id } }"}')

            curl -s -X POST https://api.monday.com/v2 \
              -H "Authorization: Bearer $MONDAY_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data-raw "$UPDATE_PAYLOAD" | jq .

            echo "‚úÖ Item atualizado com sucesso!"
            echo "ID do Item: $ITEM_ID"
            echo "Status atual: $STATUS_LABEL"

          else
            echo "‚ûï Item n√£o existe, criando novo item..."
            CREATE_PAYLOAD=$(jq -n --arg name "$ITEM_NAME" --arg board_id "$BOARD_ID" --argjson colvals "$COLUMN_VALUES" \
              '{query: "mutation { create_item(board_id: \($board_id|tonumber), item_name: \($name), column_values: \($colvals|@json)) { id name } }"}')

            NEW_ITEM=$(curl -s -X POST https://api.monday.com/v2 \
              -H "Authorization: Bearer $MONDAY_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data-raw "$CREATE_PAYLOAD" | jq '.')

            NEW_ITEM_ID=$(echo "$NEW_ITEM" | jq -r '.data.create_item.id // empty')
            echo "‚úÖ Item criado com sucesso!"
            echo "ID do Item: $NEW_ITEM_ID"
            echo "Status inicial: $STATUS_LABEL"
          fi
