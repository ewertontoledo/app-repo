name: Build image -> Push to OCIR, Trivy Scan and Update Fleet repo

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      APP_NAME: "app-teste-2"
      APP_PORT: 9100
      TRIVY_FAIL_ON: "true"  # "false" se n√£o quiser quebrar a pipeline

    steps:
      # 1Ô∏è‚É£ Checkout do reposit√≥rio
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configura QEMU (para build multiplataforma)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      # 3Ô∏è‚É£ Configura Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 4Ô∏è‚É£ Login no OCIR
      - name: Login to OCIR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_AUTH_TOKEN }}

      # 5Ô∏è‚É£ Define tag curta do commit
      - name: Set short SHA
        id: vars
        run: echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-40)" >> $GITHUB_ENV

      # 6Ô∏è‚É£ Build e push da imagem
      - name: Build and push image if not exists
        run: |
          set -euo pipefail
          IMAGE="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${APP_NAME}:${SHORT_SHA}"
          echo "üîç Verificando se a imagem $IMAGE j√° existe..."
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "‚úÖ Imagem $IMAGE j√° existe"
          else
            echo "üì¶ Buildando e pushando $IMAGE..."
            docker buildx build --platform linux/amd64,linux/arm64 --pull -t "$IMAGE" --push .

      # 7Ô∏è‚É£ Scan com Trivy
      - name: Scan image with Trivy
        run: |
          set -euo pipefail
          IMAGE="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${APP_NAME}:${SHORT_SHA}"
          echo "üîí Escaneando $IMAGE com Trivy..."
          curl -sfL https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.65.0_Linux-64bit.tar.gz -o trivy.tar.gz
          tar zxvf trivy.tar.gz
          sudo mv trivy /usr/local/bin/
          mkdir -p trivy-reports
          trivy image --exit-code 0 --severity HIGH,CRITICAL --format json -o trivy-reports/trivy-report.json "$IMAGE"
          zip -r trivy-reports.zip trivy-reports

      # 8Ô∏è‚É£ Gerar JSON de sugest√µes de upgrade
      - name: Generate upgrade suggestions JSON
        run: |
          set -euo pipefail
          jq '[.Results[].Vulnerabilities[]? 
               | select(.Severity=="HIGH" or .Severity=="CRITICAL") 
               | {
                   package: .PkgName,
                   current_version: .InstalledVersion,
                   suggested_fix: .FixedVersion,
                   severity: .Severity,
                   cve: .VulnerabilityID
                 }]' trivy-reports/trivy-report.json > trivy-reports/upgrade-suggestions.json
          echo "üìÑ Arquivo de sugest√µes gerado em trivy-reports/upgrade-suggestions.json"

      # 9Ô∏è‚É£ Mostrar relat√≥rio e falhar se necess√°rio
      - name: Show Trivy JSON and fail if needed
        if: ${{ env.TRIVY_FAIL_ON == 'true' }}
        run: |
          set -euo pipefail
          COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length' trivy-reports/trivy-report.json)
          echo "üìÑ Relat√≥rio completo de vulnerabilidades (mesmo se pipeline quebrar):"
          jq '.' trivy-reports/trivy-report.json || echo "‚úÖ Nenhuma vulnerabilidade cr√≠tica"
          if [ "$COUNT" -gt 0 ]; then
            echo "‚ùå Encontradas $COUNT vulnerabilidades HIGH/CRITICAL"
            exit 1
          else
            echo "‚úÖ Nenhuma vulnerabilidade HIGH/CRITICAL encontrada"
          fi

      # üîü Upload dos relat√≥rios Trivy
      - name: Upload Trivy reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: trivy-reports/
      - name: Upload Trivy reports ZIP
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports-zip
          path: trivy-reports.zip

      # 1Ô∏è‚É£1Ô∏è‚É£ Instala jq e yq
      - name: Install jq and yq
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq zip
          curl -sL https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64 -o yq
          chmod +x yq
          sudo mv yq /usr/local/bin/

      # 1Ô∏è‚É£2Ô∏è‚É£ Atualiza os manifests no Fleet repo
      - name: Update Fleet repo manifests
        env:
          FLEET_REPO: ${{ secrets.FLEET_REPO_URL }}
          FLEET_BRANCH: ${{ secrets.FLEET_BRANCH }}
          FLEET_PAT: ${{ secrets.FLEET_REPO_PAT }}
          IMAGE: ${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${APP_NAME}:${SHORT_SHA}
          PORT: ${{ env.APP_PORT }}
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          REPO_NO_PROTO=${FLEET_REPO#https://}
          CLONE_URL="https://${FLEET_PAT}@${REPO_NO_PROTO}"
          BRANCH="${FLEET_BRANCH:-main}"
          git clone --depth 1 --branch "${BRANCH}" "${CLONE_URL}" fleet-repo
          cd fleet-repo || exit 1

          MANIFEST="k8s/apps/${APP_NAME}/deployment.yaml"
          yq e -i '.spec.template.spec.containers[0].image = env(IMAGE)' "$MANIFEST"
          yq e -i '.spec.template.spec.containers[0].ports[0].containerPort = env(PORT)' "$MANIFEST"

          if git diff --quiet --exit-code; then
            echo "‚úÖ Nenhuma atualiza√ß√£o necess√°ria"
          else
            git add "$MANIFEST"
            git commit -m "Atualiza imagem e porta para ${APP_NAME}"
            git push origin "${BRANCH}"
            echo "üöÄ Manifest atualizado no Fleet repo"
          fi
