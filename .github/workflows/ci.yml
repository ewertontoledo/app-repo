name: Build image -> OCIR, Trivy scan and update Fleet repo

on:
  push:
    branches: [ "stage" ]
  workflow_dispatch:
    inputs:
      status:
        description: 'Status do deploy'
        required: true
        default: 'Não iniciado'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      APP_NAME: "app-teste-2"
      APP_PORT: 9000
      TEAMS_WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to OCIR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_AUTH_TOKEN }}

      - name: Build and push image if not exists
        run: |
          IMAGE="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAMESPACE }}/stage/image/${APP_NAME}:${{ github.sha }}"
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
          echo "🔍 Verificando se a imagem já existe..."
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "✅ Imagem $IMAGE já existe"
          else
            echo "📦 Buildando e pushando $IMAGE..."
            docker build -t "$IMAGE" .
            docker push "$IMAGE"
          fi

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          mkdir -p $HOME/bin
          mv ./bin/trivy $HOME/bin/
          echo "$HOME/bin" >> $GITHUB_PATH
          export PATH="$HOME/bin:$PATH"
          trivy --version

      - name: Criar diretório para relatório Trivy
        run: mkdir -p trivy-reports

      - name: Scan image with Trivy
        id: trivy
        run: |
          export PATH="$HOME/bin:$PATH"
          trivy image --severity HIGH,CRITICAL --exit-code 1 \
            --format json -o trivy-reports/trivy-report.json \
            "${IMAGE}"

      - name: Show Trivy JSON summary in log
        if: always()
        run: |
          echo "🔍 Resumo das vulnerabilidades HIGH/CRITICAL:"
          if [ -f trivy-reports/trivy-report.json ]; then
            jq '.Results[]?.Vulnerabilities[]? | {PkgName, InstalledVersion, Severity, Title}' trivy-reports/trivy-report.json || echo "✅ Nenhuma vulnerabilidade encontrada"
          else
            echo "✅ Relatório não encontrado"
          fi

      - name: Upload Trivy report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-reports/trivy-report.json

      - name: Notify Teams on Trivy failure
        if: failure()
        run: |
          if [ -n "$TEAMS_WEBHOOK_URL" ]; then
            ARTIFACT_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts" \
              | jq -r '.artifacts[0].id')
            REPORT_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${ARTIFACT_ID}"
            PAYLOAD="{\"text\": \"⚠️ A pipeline falhou durante o scan do Trivy para '${APP_NAME}'.\\n🔗 Relatório disponível em: ${REPORT_URL}\"}"
            curl -H 'Content-Type: application/json' -d "$PAYLOAD" $TEAMS_WEBHOOK_URL
          fi

      - name: Update Fleet repo manifests
        if: success()
        env:
          FLEET_REPO: ${{ secrets.FLEET_REPO_URL }}
          FLEET_BRANCH: ${{ secrets.FLEET_BRANCH }}
          FLEET_PAT: ${{ secrets.FLEET_REPO_PAT }}
          IMAGE: ${{ env.IMAGE }}
          PORT: ${{ env.APP_PORT }}
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          REPO_NO_PROTO="${FLEET_REPO#https://}"
          CLONE_URL="https://${FLEET_PAT}@${REPO_NO_PROTO}"
          BRANCH="${FLEET_BRANCH:-main}"
          git clone --depth 1 --branch "${BRANCH}" "${CLONE_URL}" fleet-repo
          cd fleet-repo
          sudo apt-get update -qq
          sudo apt-get install -y -qq jq
          curl -sSL https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64 -o yq
          chmod +x yq
          sudo mv yq /usr/local/bin/
          MANIFEST="k8s/apps/${APP_NAME}/stage/deployment.yaml"
          yq e -i ".spec.template.spec.containers[0].image = \"${IMAGE}\"" "$MANIFEST"
          yq e -i ".spec.template.spec.containers[0].ports[0].containerPort = ${PORT}" "$MANIFEST"
          if git diff --quiet --exit-code; then
            echo "✅ Nenhuma alteração detectada"
          else
            git add "$MANIFEST"
            git commit -m "Atualiza imagem e porta para ${IMAGE}:${PORT} [ci skip]"
            git push origin "${BRANCH}"
            echo "✅ Manifest atualizado"
          fi

      - name: Create/Update Monday Item
        if: success()
        env:
          MONDAY_API_TOKEN: ${{ secrets.MONDAY_API_TOKEN }}
          APP_NAME: ${{ env.APP_NAME }}
          IMAGE: ${{ env.IMAGE }}
          BOARD_ID: "10018892855"
        run: |
          set -eo pipefail

          ITEM_NAME="Deploy Stage - $APP_NAME"
          IMAGE_INFO="Imagem: $IMAGE"

          echo "🚀 Verificando item: $ITEM_NAME"

          # 1) Busca de itens existentes usando boards(ids: [ID]) { items_page { items { id name column_values { id text } } } }
          QUERY=$(jq -n --arg board_id "$BOARD_ID" \
            '{query: "query { boards(ids: [\($board_id)]) { items_page { items { id name column_values { id text } } } } }"}')

          echo "---- QUERY (search) ----"
          echo "$QUERY" | jq .

          RESPONSE=$(curl -s -X POST https://api.monday.com/v2 \
            -H "Authorization: Bearer $MONDAY_API_TOKEN" \
            -H "Content-Type: application/json" \
            --data-raw "$QUERY")

          echo "---- RESPONSE (search) ----"
          echo "$RESPONSE" | jq . || echo "$RESPONSE"

          # 3) Validação de erros: aborta se API retornar erros
          if echo "$RESPONSE" | jq -e '.errors? | length > 0' > /dev/null 2>&1; then
            echo "🚫 Erro da API do Monday (search). Aborting."
            echo "$RESPONSE" | jq .
            exit 1
          fi

          # Extrai ITEM_ID e CURRENT_STATUS (tratando ausência de column_values)
          ITEM_ID=$(echo "$RESPONSE" | jq -r --arg name "$ITEM_NAME" \
            '.data.boards[0].items_page.items[]? | select(.name == $name) | .id // empty')
          CURRENT_STATUS=$(echo "$RESPONSE" | jq -r --arg name "$ITEM_NAME" \
            '.data.boards[0].items_page.items[]? | select(.name == $name) | (.column_values? // []) | map(select(.id=="project_status"))[0].text // empty')

          echo "ITEM_ID=${ITEM_ID:-<empty>}"
          echo "CURRENT_STATUS=${CURRENT_STATUS:-<empty>}"

          if [ -z "$ITEM_ID" ]; then
            echo "➕ Item não existe, criando no status 'Não iniciado'..."

            # COLUMN_VALUES como JSON direto
            COLUMN_VALUES=$(jq -n --arg info "$IMAGE_INFO" \
              '{project_status: {label: "Não iniciado"}, text_mkvn9dqm: $info}')

            echo "---- COLUMN_VALUES (object) ----"
            echo "$COLUMN_VALUES" | jq .

            # 2) Conversão para string: usar ($colvals | tostring) ao montar o mutation
            PAYLOAD=$(jq -n --arg name "$ITEM_NAME" --argjson colvals "$COLUMN_VALUES" --arg board_id "$BOARD_ID" \
              '{query: "mutation { create_item(board_id: \($board_id|tonumber), item_name: \($name), column_values: \($colvals | tostring)) { id name } }"}')

            echo "---- PAYLOAD (create) ----"
            echo "$PAYLOAD" | jq .

            CREATE_RESP=$(curl -s -X POST https://api.monday.com/v2 \
              -H "Authorization: Bearer $MONDAY_API_TOKEN" \
              -H "Content-Type: application/json" \
              --data-raw "$PAYLOAD")

            echo "---- RESPONSE (create) ----"
            echo "$CREATE_RESP" | jq . || echo "$CREATE_RESP"

            # Valida erros da criação
            if echo "$CREATE_RESP" | jq -e '.errors? | length > 0' > /dev/null 2>&1; then
              echo "🚫 Erro ao criar item no Monday."
              echo "$CREATE_RESP" | jq .
              exit 1
            fi

          else
            if [ "$CURRENT_STATUS" = "Em Correção" ]; then
              echo "🔄 Item já existe em 'Em Correção', atualizando apenas imagem..."

              # 2) Usar tostring também para o value simples
              UPDATE_PAYLOAD=$(jq -n --arg item_id "$ITEM_ID" --arg board_id "$BOARD_ID" --arg info "$IMAGE_INFO" \
                '{query: "mutation { change_simple_column_value(board_id: \($board_id|tonumber), item_id: \($item_id|tonumber), column_id: \"text_mkvn9dqm\", value: \($info | tostring)) { id } }"}')

              echo "---- PAYLOAD (update) ----"
              echo "$UPDATE_PAYLOAD" | jq .

              UPDATE_RESP=$(curl -s -X POST https://api.monday.com/v2 \
                -H "Authorization: Bearer $MONDAY_API_TOKEN" \
                -H "Content-Type: application/json" \
                --data-raw "$UPDATE_PAYLOAD")

              echo "---- RESPONSE (update) ----"
              echo "$UPDATE_RESP" | jq . || echo "$UPDATE_RESP"

              # Valida erros do update
              if echo "$UPDATE_RESP" | jq -e '.errors? | length > 0' > /dev/null 2>&1; then
                echo "🚫 Erro ao atualizar item no Monday."
                echo "$UPDATE_RESP" | jq .
                exit 1
              fi

            else
              echo "✅ Item já existe no status '$CURRENT_STATUS', nada a fazer."
            fi
          fi
