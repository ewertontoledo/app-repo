name: Build image -> OCIR, Trivy Scan and Update Fleet repo

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Nome do app'
        required: true
        default: 'app-teste-2'
      app_port:
        description: 'Porta do container'
        required: true
        default: '9100'

jobs:
  build-and-scan:
    runs-on: ubuntu-latest
    env:
      APP_NAME: ${{ github.event.inputs.app_name }}
      APP_PORT: ${{ github.event.inputs.app_port }}
      TRIVY_FAIL_ON: true
      GITHUB_SHA: ${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Buildx/QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login OCIR
      - name: Login to OCIR
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_AUTH_TOKEN }}

      # Build e push da imagem se n√£o existir
      - name: Build and push image if not exists
        shell: bash
        run: |
          set -euo pipefail
          IMAGE="gru.ocir.io/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${APP_NAME}:${GITHUB_SHA}"
          echo "üîç Verificando se a imagem $IMAGE j√° existe..."
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "‚úÖ Imagem j√° existe, pulando build."
          else
            echo "üì¶ Imagem n√£o encontrada. Buildando e pushando $IMAGE..."
            # ATEN√á√ÉO: context deve ser a pasta que cont√©m o Dockerfile
            docker buildx build --platform linux/amd64,linux/arm64 -t "$IMAGE" --push "./apps/${APP_NAME}"

      # Scan com Trivy
      - name: Scan image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "gru.ocir.io/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${APP_NAME}:${GITHUB_SHA}"
          format: json
          output: trivy-reports/trivy-report.json
          severity: HIGH,CRITICAL
          exit-code: 0

      - name: Zip Trivy reports
        run: zip -r trivy-reports.zip trivy-reports

      - name: Fail if HIGH/CRITICAL vulnerabilities
        if: ${{ env.TRIVY_FAIL_ON == 'true' }}
        run: |
          COUNT=$(jq '[.Results[].Vulnerabilities[]? | select(.Severity=="HIGH" or .Severity=="CRITICAL")] | length' trivy-reports/trivy-report.json)
          echo "üìÑ Relat√≥rio completo de vulnerabilidades:"
          jq '.' trivy-reports/trivy-report.json || echo "‚úÖ Nenhuma vulnerabilidade cr√≠tica"
          if [ "$COUNT" -gt 0 ]; then
            echo "‚ùå Encontradas $COUNT vulnerabilidades HIGH/CRITICAL"
            exit 1
          else
            echo "‚úÖ Nenhuma vulnerabilidade HIGH/CRITICAL encontrada"

      # Upload dos relat√≥rios
      - name: Upload Trivy reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports
          path: trivy-reports/
      - name: Upload Trivy reports ZIP
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports-zip
          path: trivy-reports.zip

      # Atualiza Fleet repo
      - name: Update Fleet repo manifests
        shell: bash
        env:
          FLEET_REPO: ${{ secrets.FLEET_REPO_URL }}
          FLEET_BRANCH: ${{ secrets.FLEET_BRANCH }}
          FLEET_PAT: ${{ secrets.FLEET_REPO_PAT }}
          IMAGE: "gru.ocir.io/${{ secrets.IMAGE_NAMESPACE }}/poc/image/${APP_NAME}:${GITHUB_SHA}"
          APP_NAME: ${{ env.APP_NAME }}
          APP_PORT: ${{ env.APP_PORT }}
        run: |
          set -euo pipefail
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          REPO_NO_PROTO=${FLEET_REPO#https://}
          CLONE_URL="https://${FLEET_PAT}@${REPO_NO_PROTO}"
          BRANCH="${FLEET_BRANCH:-main}"

          git clone --depth 1 --branch "${BRANCH}" "${CLONE_URL}" fleet-repo
          cd fleet-repo || exit 1

          sudo apt-get update && sudo apt-get install -y jq
          curl -sL https://github.com/mikefarah/yq/releases/download/v4.45.1/yq_linux_amd64 -o yq
          chmod +x yq && sudo mv yq /usr/local/bin/

          DEPLOYMENT_FILE="k8s/apps/${APP_NAME}/deployment.yaml"
          if [ -f "$DEPLOYMENT_FILE" ]; then
            # Atualiza imagem
            yq e -i '.spec.template.spec.containers[] |= (select(.name == "'"${APP_NAME}"'") .image = env(IMAGE))' "$DEPLOYMENT_FILE"
            # Atualiza porta somente se estiver vazia
            CURRENT_PORT=$(yq e '.spec.template.spec.containers[] | select(.name=="'"${APP_NAME}"'") | .ports[0].containerPort // ""' "$DEPLOYMENT_FILE")
            if [ -z "$CURRENT_PORT" ]; then
              yq e -i '.spec.template.spec.containers[] |= (select(.name == "'"${APP_NAME}"'") .ports[0].containerPort = env(APP_PORT))' "$DEPLOYMENT_FILE"
            fi

            if git diff --quiet --exit-code; then
              echo "‚úÖ Nenhuma altera√ß√£o necess√°ria"
            else
              git add "$DEPLOYMENT_FILE"
              git commit -m "Atualiza imagem (e porta se necess√°rio) para ${APP_NAME} [ci skip]"
              git push origin "${BRANCH}"
              echo "üöÄ Manifest atualizado no Fleet repo"
            fi
          else
            echo "‚ö†Ô∏è Arquivo $DEPLOYMENT_FILE n√£o encontrado, pulando atualiza√ß√£o"
